1.
void lucas(){
  int t1 = 1, t2 = 3;
  cout << t1 << endl;
  cout << t2 << endl;
  while(true){
    int soma = t1 + t2;
    t1 = t2;
    t2 = soma;
    cout << soma << endl;    
  }    
}
2.
void sequencia(){
  int t1=0,t2=1,t3=1;
  cout << t1 << endl;
  cout << t2 << endl;
  cout << t3 << endl;
  while(true){
    int soma = t1+t2+t3;
    t1=t2;
    t2=t3;
    t3 =soma;
    cout << soma << endl;    
  }    
}
3.
bool ehFibonacci(int a, int b){
  int t1 = 0, t2 = 1,soma=0;
  while(true){
    if(t1==a && t2==b)
      return true;
    else{
      soma = t1 + t2;
      t1 = t2;
      t2 = soma;
      cout << soma << endl;  
    }
  }
  return false;    
}
 
4. Gere a sequência onde cada membro é a soma dos fatoriais adjacentes, isto é:
 
f3=1!+0!
f4=2!+1!
f5=3!+2!
 
Note que por definição 0! = 1.

void fibonacci(){
  int i=1;
  double fat1=1,fat2=1; 
  //0!+1!

  while(true){
    double f = fat1 + fat2;
    fat1=fat2;
    fat2*=++i;
    cout << f << endl;
  }    
}
 
## REVERSÃO DE DÍGITOS ##
 
5. Crie um algoritmo que conta o número de dígitos em um inteiro.
int contaDigitos(int n){
  int conta=0;
  do{
    conta++;
    n/=10;
  }while(n!=0);
  return conta;
}
 
6. Crie um algoritmo para somar os dígitos de um inteiro.
int somaDigitos(int n){
  int soma=0;
  while(n!=0){
    soma += n%10;
    n/=10; 
  }
  return soma;
}
 
7. Crie um algoritmo que lê uma sequência de n dígitos e converte-os em um único inteiro decimal.
Por exemplo, o algoritmo deve converter o conjunto de 5 dígitos {2,7,4,9,3} para o inteiro 27493.
 
 int converteDigito(vector<int> &a){
  int num=0 , tam = pow(10,a.size()-1);
  for(int i=0; i<a.size() ; i++ ){
    num += a[i]*tam;
    tam/=10;
  }
  return num;
}
